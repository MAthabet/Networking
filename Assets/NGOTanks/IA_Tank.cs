//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.11.2
//     from Assets/NGOTanks/IA_Tank.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @IA_Tank: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @IA_Tank()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""IA_Tank"",
    ""maps"": [
        {
            ""name"": ""Control"",
            ""id"": ""eca45d21-129e-46e2-b8db-0112e21bd449"",
            ""actions"": [
                {
                    ""name"": ""MoveTank"",
                    ""type"": ""Value"",
                    ""id"": ""8864ec63-8b8c-46b7-b87b-9fa0563215ab"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""RotateTorret"",
                    ""type"": ""Value"",
                    ""id"": ""df0febf4-0df1-4b7e-9f0b-bda8a3488192"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Fire"",
                    ""type"": ""Button"",
                    ""id"": ""74d2c2ad-29ca-47a1-a26c-c72345533725"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""UseAbility"",
                    ""type"": ""Button"",
                    ""id"": ""e53ac280-0a80-4ad1-af46-935386239588"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""WASD"",
                    ""id"": ""1eaf0c62-26b1-432f-98c5-9f5a679bae53"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveTank"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""86ba4fb9-6e13-468d-a7ba-c5067585e977"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveTank"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""3e29cb63-aab2-4842-9712-e7ad7a9b29fc"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveTank"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""8c995f7e-1ccb-4cda-89ae-37931c770045"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveTank"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""520cdd39-7127-4b5a-8453-03b0119af165"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveTank"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""77c2ed74-1d35-4947-8019-76e9181daa13"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RotateTorret"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""91eb3046-0c6f-41aa-98b4-e990a368b137"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RotateTorret"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""c7c9cb51-97f6-4d34-b28b-d1837d05260e"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RotateTorret"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""93b9cf5e-b5be-448b-8273-21483ffeed9f"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Fire"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f4dd6e1f-c0c7-4c97-868e-a29c8f8c48d3"",
                    ""path"": ""<Keyboard>/leftShift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""UseAbility"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Control
        m_Control = asset.FindActionMap("Control", throwIfNotFound: true);
        m_Control_MoveTank = m_Control.FindAction("MoveTank", throwIfNotFound: true);
        m_Control_RotateTorret = m_Control.FindAction("RotateTorret", throwIfNotFound: true);
        m_Control_Fire = m_Control.FindAction("Fire", throwIfNotFound: true);
        m_Control_UseAbility = m_Control.FindAction("UseAbility", throwIfNotFound: true);
    }

    ~@IA_Tank()
    {
        UnityEngine.Debug.Assert(!m_Control.enabled, "This will cause a leak and performance issues, IA_Tank.Control.Disable() has not been called.");
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Control
    private readonly InputActionMap m_Control;
    private List<IControlActions> m_ControlActionsCallbackInterfaces = new List<IControlActions>();
    private readonly InputAction m_Control_MoveTank;
    private readonly InputAction m_Control_RotateTorret;
    private readonly InputAction m_Control_Fire;
    private readonly InputAction m_Control_UseAbility;
    public struct ControlActions
    {
        private @IA_Tank m_Wrapper;
        public ControlActions(@IA_Tank wrapper) { m_Wrapper = wrapper; }
        public InputAction @MoveTank => m_Wrapper.m_Control_MoveTank;
        public InputAction @RotateTorret => m_Wrapper.m_Control_RotateTorret;
        public InputAction @Fire => m_Wrapper.m_Control_Fire;
        public InputAction @UseAbility => m_Wrapper.m_Control_UseAbility;
        public InputActionMap Get() { return m_Wrapper.m_Control; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(ControlActions set) { return set.Get(); }
        public void AddCallbacks(IControlActions instance)
        {
            if (instance == null || m_Wrapper.m_ControlActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_ControlActionsCallbackInterfaces.Add(instance);
            @MoveTank.started += instance.OnMoveTank;
            @MoveTank.performed += instance.OnMoveTank;
            @MoveTank.canceled += instance.OnMoveTank;
            @RotateTorret.started += instance.OnRotateTorret;
            @RotateTorret.performed += instance.OnRotateTorret;
            @RotateTorret.canceled += instance.OnRotateTorret;
            @Fire.started += instance.OnFire;
            @Fire.performed += instance.OnFire;
            @Fire.canceled += instance.OnFire;
            @UseAbility.started += instance.OnUseAbility;
            @UseAbility.performed += instance.OnUseAbility;
            @UseAbility.canceled += instance.OnUseAbility;
        }

        private void UnregisterCallbacks(IControlActions instance)
        {
            @MoveTank.started -= instance.OnMoveTank;
            @MoveTank.performed -= instance.OnMoveTank;
            @MoveTank.canceled -= instance.OnMoveTank;
            @RotateTorret.started -= instance.OnRotateTorret;
            @RotateTorret.performed -= instance.OnRotateTorret;
            @RotateTorret.canceled -= instance.OnRotateTorret;
            @Fire.started -= instance.OnFire;
            @Fire.performed -= instance.OnFire;
            @Fire.canceled -= instance.OnFire;
            @UseAbility.started -= instance.OnUseAbility;
            @UseAbility.performed -= instance.OnUseAbility;
            @UseAbility.canceled -= instance.OnUseAbility;
        }

        public void RemoveCallbacks(IControlActions instance)
        {
            if (m_Wrapper.m_ControlActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IControlActions instance)
        {
            foreach (var item in m_Wrapper.m_ControlActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_ControlActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public ControlActions @Control => new ControlActions(this);
    public interface IControlActions
    {
        void OnMoveTank(InputAction.CallbackContext context);
        void OnRotateTorret(InputAction.CallbackContext context);
        void OnFire(InputAction.CallbackContext context);
        void OnUseAbility(InputAction.CallbackContext context);
    }
}
