//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.11.2
//     from Assets/NGOTanks/Input/player.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInput: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""player"",
    ""maps"": [
        {
            ""name"": ""Controll"",
            ""id"": ""b4e18c11-65a2-4632-bfcd-7b4781eaa3a5"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""97552267-f84b-412f-b81d-207f4a000f43"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Look"",
                    ""type"": ""Value"",
                    ""id"": ""1af27888-be43-4167-b642-05877e957dea"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Fire"",
                    ""type"": ""Value"",
                    ""id"": ""78e549ad-b814-434d-bccb-e99b126b7506"",
                    ""expectedControlType"": ""Analog"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""ADS"",
                    ""type"": ""Button"",
                    ""id"": ""889f57ba-3a1e-4261-b272-3353c4faf7f5"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Reload"",
                    ""type"": ""Button"",
                    ""id"": ""b8cda326-dc06-4e81-8128-95bb8a23ed80"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""64beb4f5-a368-4757-98d2-a8ee22024ee5"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""PickUp"",
                    ""type"": ""Button"",
                    ""id"": ""5243bbaf-b5ae-4f42-a548-0ca159027cb2"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Throw"",
                    ""type"": ""Button"",
                    ""id"": ""5b300469-9243-4a54-9306-a8ba80bb390f"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SwitchArm1"",
                    ""type"": ""Button"",
                    ""id"": ""58c487a0-a4b4-420f-a681-48fc6d7504da"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SwitchArm2"",
                    ""type"": ""Button"",
                    ""id"": ""4ad2a38f-e7d8-4164-8db7-bc4011d0f74c"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""WASD"",
                    ""id"": ""31a1da6e-55dd-42b9-bbb6-12d271d91150"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""5cebb9a1-3caf-4ec0-868f-9ba477657776"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""a4946c99-6916-4fc6-97a5-49896daf9c06"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""0f13a043-15cc-45ab-bd8a-58e3afd539d6"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""42a8bbba-0732-4ad4-93be-d05026198d3c"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""ARROWS"",
                    ""id"": ""60ea3f0d-8cd7-4ef3-83f0-2949db773bf6"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""dcc19874-c89f-47d2-9e2f-1b0a9c897d8d"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""887279c4-048f-4603-be21-7896156dfdd9"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""546fe796-2198-4c04-a8e1-c2cc7f4cb2e3"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""69026b72-5cfc-4219-9c8b-c675349e51cf"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""42b62d9a-9aba-4e4f-b33f-9d65c83fac1c"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ADS"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""88666806-0c5a-44be-aa81-ea83ffa8ff3d"",
                    ""path"": ""<Keyboard>/r"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Reload"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""51a259c4-8c98-4edc-8072-f71a931ea002"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Look"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""799dbe5e-41ea-471d-b46e-5446895e3570"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7444e1fc-90de-49dc-b82a-9a4b6c839b13"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PickUp"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2bcdfd8d-7b5a-4a69-80a1-63337ffe01af"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Throw"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""26a1ca28-0645-46b0-9bf5-58d2d14349e3"",
                    ""path"": ""<Keyboard>/1"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SwitchArm1"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""97a20eee-578f-4091-92ca-6a4876016445"",
                    ""path"": ""<Keyboard>/2"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SwitchArm2"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""754082bd-c186-4006-ac7f-ff7af4ec847e"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Fire"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Controll
        m_Controll = asset.FindActionMap("Controll", throwIfNotFound: true);
        m_Controll_Move = m_Controll.FindAction("Move", throwIfNotFound: true);
        m_Controll_Look = m_Controll.FindAction("Look", throwIfNotFound: true);
        m_Controll_Fire = m_Controll.FindAction("Fire", throwIfNotFound: true);
        m_Controll_ADS = m_Controll.FindAction("ADS", throwIfNotFound: true);
        m_Controll_Reload = m_Controll.FindAction("Reload", throwIfNotFound: true);
        m_Controll_Jump = m_Controll.FindAction("Jump", throwIfNotFound: true);
        m_Controll_PickUp = m_Controll.FindAction("PickUp", throwIfNotFound: true);
        m_Controll_Throw = m_Controll.FindAction("Throw", throwIfNotFound: true);
        m_Controll_SwitchArm1 = m_Controll.FindAction("SwitchArm1", throwIfNotFound: true);
        m_Controll_SwitchArm2 = m_Controll.FindAction("SwitchArm2", throwIfNotFound: true);
    }

    ~@PlayerInput()
    {
        UnityEngine.Debug.Assert(!m_Controll.enabled, "This will cause a leak and performance issues, PlayerInput.Controll.Disable() has not been called.");
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Controll
    private readonly InputActionMap m_Controll;
    private List<IControllActions> m_ControllActionsCallbackInterfaces = new List<IControllActions>();
    private readonly InputAction m_Controll_Move;
    private readonly InputAction m_Controll_Look;
    private readonly InputAction m_Controll_Fire;
    private readonly InputAction m_Controll_ADS;
    private readonly InputAction m_Controll_Reload;
    private readonly InputAction m_Controll_Jump;
    private readonly InputAction m_Controll_PickUp;
    private readonly InputAction m_Controll_Throw;
    private readonly InputAction m_Controll_SwitchArm1;
    private readonly InputAction m_Controll_SwitchArm2;
    public struct ControllActions
    {
        private @PlayerInput m_Wrapper;
        public ControllActions(@PlayerInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_Controll_Move;
        public InputAction @Look => m_Wrapper.m_Controll_Look;
        public InputAction @Fire => m_Wrapper.m_Controll_Fire;
        public InputAction @ADS => m_Wrapper.m_Controll_ADS;
        public InputAction @Reload => m_Wrapper.m_Controll_Reload;
        public InputAction @Jump => m_Wrapper.m_Controll_Jump;
        public InputAction @PickUp => m_Wrapper.m_Controll_PickUp;
        public InputAction @Throw => m_Wrapper.m_Controll_Throw;
        public InputAction @SwitchArm1 => m_Wrapper.m_Controll_SwitchArm1;
        public InputAction @SwitchArm2 => m_Wrapper.m_Controll_SwitchArm2;
        public InputActionMap Get() { return m_Wrapper.m_Controll; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(ControllActions set) { return set.Get(); }
        public void AddCallbacks(IControllActions instance)
        {
            if (instance == null || m_Wrapper.m_ControllActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_ControllActionsCallbackInterfaces.Add(instance);
            @Move.started += instance.OnMove;
            @Move.performed += instance.OnMove;
            @Move.canceled += instance.OnMove;
            @Look.started += instance.OnLook;
            @Look.performed += instance.OnLook;
            @Look.canceled += instance.OnLook;
            @Fire.started += instance.OnFire;
            @Fire.performed += instance.OnFire;
            @Fire.canceled += instance.OnFire;
            @ADS.started += instance.OnADS;
            @ADS.performed += instance.OnADS;
            @ADS.canceled += instance.OnADS;
            @Reload.started += instance.OnReload;
            @Reload.performed += instance.OnReload;
            @Reload.canceled += instance.OnReload;
            @Jump.started += instance.OnJump;
            @Jump.performed += instance.OnJump;
            @Jump.canceled += instance.OnJump;
            @PickUp.started += instance.OnPickUp;
            @PickUp.performed += instance.OnPickUp;
            @PickUp.canceled += instance.OnPickUp;
            @Throw.started += instance.OnThrow;
            @Throw.performed += instance.OnThrow;
            @Throw.canceled += instance.OnThrow;
            @SwitchArm1.started += instance.OnSwitchArm1;
            @SwitchArm1.performed += instance.OnSwitchArm1;
            @SwitchArm1.canceled += instance.OnSwitchArm1;
            @SwitchArm2.started += instance.OnSwitchArm2;
            @SwitchArm2.performed += instance.OnSwitchArm2;
            @SwitchArm2.canceled += instance.OnSwitchArm2;
        }

        private void UnregisterCallbacks(IControllActions instance)
        {
            @Move.started -= instance.OnMove;
            @Move.performed -= instance.OnMove;
            @Move.canceled -= instance.OnMove;
            @Look.started -= instance.OnLook;
            @Look.performed -= instance.OnLook;
            @Look.canceled -= instance.OnLook;
            @Fire.started -= instance.OnFire;
            @Fire.performed -= instance.OnFire;
            @Fire.canceled -= instance.OnFire;
            @ADS.started -= instance.OnADS;
            @ADS.performed -= instance.OnADS;
            @ADS.canceled -= instance.OnADS;
            @Reload.started -= instance.OnReload;
            @Reload.performed -= instance.OnReload;
            @Reload.canceled -= instance.OnReload;
            @Jump.started -= instance.OnJump;
            @Jump.performed -= instance.OnJump;
            @Jump.canceled -= instance.OnJump;
            @PickUp.started -= instance.OnPickUp;
            @PickUp.performed -= instance.OnPickUp;
            @PickUp.canceled -= instance.OnPickUp;
            @Throw.started -= instance.OnThrow;
            @Throw.performed -= instance.OnThrow;
            @Throw.canceled -= instance.OnThrow;
            @SwitchArm1.started -= instance.OnSwitchArm1;
            @SwitchArm1.performed -= instance.OnSwitchArm1;
            @SwitchArm1.canceled -= instance.OnSwitchArm1;
            @SwitchArm2.started -= instance.OnSwitchArm2;
            @SwitchArm2.performed -= instance.OnSwitchArm2;
            @SwitchArm2.canceled -= instance.OnSwitchArm2;
        }

        public void RemoveCallbacks(IControllActions instance)
        {
            if (m_Wrapper.m_ControllActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IControllActions instance)
        {
            foreach (var item in m_Wrapper.m_ControllActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_ControllActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public ControllActions @Controll => new ControllActions(this);
    public interface IControllActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnLook(InputAction.CallbackContext context);
        void OnFire(InputAction.CallbackContext context);
        void OnADS(InputAction.CallbackContext context);
        void OnReload(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
        void OnPickUp(InputAction.CallbackContext context);
        void OnThrow(InputAction.CallbackContext context);
        void OnSwitchArm1(InputAction.CallbackContext context);
        void OnSwitchArm2(InputAction.CallbackContext context);
    }
}
